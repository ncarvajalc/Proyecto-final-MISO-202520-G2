name: 📊 Complete Coverage Report

on:
  push:
    branches:
      - "*"
  workflow_dispatch:

jobs:
  # Backend Coverage Tests
  backend-coverage:
    name: Backend (${{ matrix.service }} - ${{ matrix.test-type }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - base
          - SecurityAndAudit
          - Tracking
          - Warehouse
          - SalesForce
          - PurchasesAndSuppliers
        test-type:
          - unit
          - functional
          - integration
          - acceptance
    defaults:
      run:
        working-directory: backend/${{ matrix.service }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/${{ matrix.service }}/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ${{ matrix.test-type }} tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}/backend/${{ matrix.service }}
        continue-on-error: true
        run: |
          mkdir -p coverage-output
          pytest tests/test_*_${{ matrix.test-type }}.py \
            --cov=app \
            --cov-report=term \
            --cov-report=json:coverage-output/coverage.json \
            --cov-report=html:coverage-output/html \
            --maxfail=1 \
            --disable-warnings \
            -v > coverage-output/test-output.log 2>&1 || true

      - name: Generate coverage summary
        if: always()
        run: |
          cd coverage-output
          if [ -f coverage.json ]; then
            python3 -c "
          import json
          with open('coverage.json', 'r') as f:
              data = json.load(f)
          coverage_pct = data['totals']['percent_covered']
          with open('coverage-summary.txt', 'w') as f:
              f.write(f'{coverage_pct:.2f}')
          print(f'✅ Coverage: {coverage_pct:.2f}%')
          " || echo "0.00" > coverage-summary.txt
          else
            echo "0.00" > coverage-summary.txt
            echo "⚠️  No coverage data generated"
          fi

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.service }}-${{ matrix.test-type }}
          path: backend/${{ matrix.service }}/coverage-output/
          if-no-files-found: ignore
          retention-days: 30

  # Frontend Coverage Tests
  frontend-coverage:
    name: Frontend (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-type:
          - unit
          - functional
          - integration
          - acceptance
    defaults:
      run:
        working-directory: cliente_web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare pnpm with Corepack
        run: |
          corepack enable
          corepack prepare pnpm@9 --activate

      - name: Setup Node.js with pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: cliente_web/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ${{ matrix.test-type }} tests with coverage
        continue-on-error: true
        run: |
          pnpm run test:${{ matrix.test-type }} --coverage > test-output-${{ matrix.test-type }}.log 2>&1 || true

      - name: Generate coverage summary
        if: always()
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            node -e "
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = summary.total;
            const coveragePct = total.lines.pct || 0;
            fs.writeFileSync('coverage-summary-${{ matrix.test-type }}.txt', coveragePct.toFixed(2));
            console.log('✅ Coverage: ' + coveragePct.toFixed(2) + '%');
            "
          else
            echo "0.00" > coverage-summary-${{ matrix.test-type }}.txt
            echo "⚠️  No coverage data generated"
          fi

      - name: Prepare coverage output
        if: always()
        run: |
          mkdir -p coverage-output
          if [ -d coverage ]; then
            cp -r coverage/* coverage-output/
          fi
          if [ -f coverage-summary-${{ matrix.test-type }}.txt ]; then
            cp coverage-summary-${{ matrix.test-type }}.txt coverage-output/
          fi
          if [ -f test-output-${{ matrix.test-type }}.log ]; then
            cp test-output-${{ matrix.test-type }}.log coverage-output/
          fi

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend-${{ matrix.test-type }}
          path: cliente_web/coverage-output/
          if-no-files-found: ignore
          retention-days: 30

  # Frontend E2E Tests
  frontend-e2e:
    name: Frontend (E2E)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      API_GATEWAY_URL: http://127.0.0.1:8080
      WEB_BASE_URL: http://127.0.0.1:5173
      VITE_API_URL: http://127.0.0.1:8080
      VITE_BASE: /
      E2E_ADMIN_EMAIL: admin@example.com
      E2E_ADMIN_PASSWORD: admin123
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: cliente_web/pnpm-lock.yaml

      - name: Install dependencies and build frontend
        working-directory: cliente_web
        run: |
          pnpm install --frozen-lockfile
          pnpm exec playwright install --with-deps
          pnpm run build

      - name: Start backend services
        run: docker compose --profile backend up -d --wait api_gateway

      - name: Run E2E tests
        working-directory: cliente_web
        continue-on-error: true
        run: |
          pnpm run preview --host 0.0.0.0 --port 5173 --strictPort &
          FRONT_PID=$!
          trap 'kill "$FRONT_PID" || true' EXIT
          pnpm dlx wait-on \
            http-get://127.0.0.1:5173 \
            http-get://127.0.0.1:8080/health
          pnpm run test:e2e > e2e-output.log 2>&1 || true

      - name: Generate E2E summary
        if: always()
        working-directory: cliente_web
        run: |
          mkdir -p coverage-output
          echo "N/A" > coverage-output/coverage-summary-e2e.txt
          if [ -f e2e-output.log ]; then
            cp e2e-output.log coverage-output/
          fi

      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend-e2e
          path: |
            cliente_web/coverage-output/
            cliente_web/playwright-report/
          if-no-files-found: ignore
          retention-days: 30

      - name: Tear down services
        if: always()
        run: docker compose down --volumes

  # Generate Consolidated Report
  generate-report:
    name: 📊 Generate Coverage Report
    runs-on: ubuntu-latest
    needs: [backend-coverage, frontend-coverage, frontend-e2e]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts
          pattern: coverage-*

      - name: List downloaded artifacts
        run: |
          echo "📦 Downloaded artifacts:"
          ls -la coverage-artifacts/ || echo "No artifacts found"
          find coverage-artifacts -type f -name "*.txt" -o -name "*.json" | head -20

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Generate consolidated report
        run: |
          python3 scripts/generate_coverage_report.py

      - name: Display report
        if: always()
        run: |
          if [ -f coverage_reports/COVERAGE_REPORT.md ]; then
            echo "📊 Coverage Report Generated:"
            echo "================================"
            cat coverage_reports/COVERAGE_REPORT.md
          else
            echo "⚠️  Report file not found"
          fi

      - name: Upload consolidated report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-coverage-report
          path: coverage_reports/
          if-no-files-found: ignore
          retention-days: 90

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'coverage_reports/COVERAGE_REPORT.md';

            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              // Split report if too long (GitHub has a limit)
              const maxLength = 65000;
              let reportBody = report;
              
              if (report.length > maxLength) {
                reportBody = report.substring(0, maxLength) + '\n\n_...Report truncated. Download the full report from artifacts._';
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportBody
              });
            } else {
              console.log('Report file not found');
            }

      - name: Create/Update Coverage Badge
        if: always()
        run: |
          if [ -f coverage_reports/coverage_summary.json ]; then
            echo "📛 Coverage summary available for badge generation"
            # Badge generation could be added here
          fi
