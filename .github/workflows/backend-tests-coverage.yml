name: Backend Tests with Coverage

on:
  push:
    paths:
      - "backend/**"
      - ".github/workflows/backend-tests-coverage.yml"
  pull_request:
    paths:
      - "backend/**"
      - ".github/workflows/backend-tests-coverage.yml"

jobs:
  test-coverage:
    name: Backend Coverage (${{ matrix.service }} - ${{ matrix.test-type }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - base
          - SecurityAndAudit
          - Tracking
          - Warehouse
          - SalesForce
          - PurchasesAndSuppliers
        test-type:
          - unit
          - functional
          - integration
          - acceptance
    defaults:
      run:
        working-directory: backend/${{ matrix.service }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/${{ matrix.service }}/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ${{ matrix.test-type }} tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}/backend/${{ matrix.service }}
        continue-on-error: true
        run: |
          pytest tests/test_*_${{ matrix.test-type }}.py \
            --cov=app \
            --cov-report=term \
            --cov-report=json:coverage-${{ matrix.test-type }}.json \
            --cov-report=html:coverage-${{ matrix.test-type }}-html \
            --maxfail=1 \
            --disable-warnings \
            -v || echo "Tests failed or not found"

      - name: Generate coverage summary
        if: always()
        run: |
          if [ -f coverage-${{ matrix.test-type }}.json ]; then
            python -c "
          import json
          import os

          with open('coverage-${{ matrix.test-type }}.json', 'r') as f:
              data = json.load(f)

          coverage_pct = data['totals']['percent_covered']

          with open('coverage-summary-${{ matrix.test-type }}.txt', 'w') as f:
              f.write(f'{coverage_pct:.2f}')

          print(f'Coverage: {coverage_pct:.2f}%')
          "
          else
            echo "0.00" > coverage-summary-${{ matrix.test-type }}.txt
            echo "No coverage data generated"
          fi

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.service }}-${{ matrix.test-type }}
          path: |
            backend/${{ matrix.service }}/coverage-${{ matrix.test-type }}.json
            backend/${{ matrix.service }}/coverage-summary-${{ matrix.test-type }}.txt
            backend/${{ matrix.service }}/coverage-${{ matrix.test-type }}-html
          if-no-files-found: ignore

  generate-report:
    name: Generate Consolidated Coverage Report
    runs-on: ubuntu-latest
    needs: test-coverage
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Generate consolidated report
        run: |
          python scripts/generate_coverage_report.py

      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-coverage-report
          path: |
            coverage_reports/
          if-no-files-found: ignore

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'coverage_reports/COVERAGE_REPORT.md';

            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }
